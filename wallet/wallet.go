// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wallet

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// WalletMetaData contains all meta data concerning the Wallet contract.
var WalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInitialManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ENotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ENotEnoughTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCodeInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEmailSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayeeTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUserSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManagerAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayeesetted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"}],\"name\":\"TimelockInsufficientDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthTransPayee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokencontract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTTransPayee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokencontract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransPayee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"inputemail\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"storedemail\",\"type\":\"string\"}],\"name\":\"emailerror\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEthTrans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeNFTTrans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTokenTrans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signaddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"initData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_veridata\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidManagerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_veridata\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidUserSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"resetManaget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newaddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"emailsignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"resetOrforgetPassword\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signaddress\",\"type\":\"address\"}],\"name\":\"resetSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setEthTransPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newdelay\",\"type\":\"uint256\"}],\"name\":\"setMinDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokencontract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setNFTTransPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokencontract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setTokenTransPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040526040518060200160405280600081525060029081620000249190620002b9565b5061012c6006553480156200003857600080fd5b50620003a0565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000c157607f821691505b602082108103620000d757620000d662000079565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000102565b6200014d868362000102565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200019a620001946200018e8462000165565b6200016f565b62000165565b9050919050565b6000819050919050565b620001b68362000179565b620001ce620001c582620001a1565b8484546200010f565b825550505050565b600090565b620001e5620001d6565b620001f2818484620001ab565b505050565b5b818110156200021a576200020e600082620001db565b600181019050620001f8565b5050565b601f82111562000269576200023381620000dd565b6200023e84620000f2565b810160208510156200024e578190505b620002666200025d85620000f2565b830182620001f7565b50505b505050565b600082821c905092915050565b60006200028e600019846008026200026e565b1980831691505092915050565b6000620002a983836200027b565b9150826002028217905092915050565b620002c4826200003f565b67ffffffffffffffff811115620002e057620002df6200004a565b5b620002ec8254620000a8565b620002f98282856200021e565b600060209050601f8311600181146200033157600084156200031c578287015190505b6200032885826200029b565b86555062000398565b601f1984166200034186620000dd565b60005b828110156200036b5784890151825560018201915060208501945060208101905062000344565b868310156200038b578489015162000387601f8916826200027b565b8355505b6001600288020188555050505b505050505050565b613f0e80620003b06000396000f3fe6080604052600436106100f75760003560e01c80634853d1b41161008a578063c2af616f11610059578063c2af616f146102fe578063d0c6bd5a14610308578063eb5d25d614610331578063f27a0c921461033b576100fe565b80634853d1b41461023d5780638da5cb5b1461027a5780639e5d4c49146102a5578063ba29482f146102d5576100fe565b806321c74acf116100c657806321c74acf146101b85780632b28be76146101e157806330f3c3941461020a57806343f93c5a14610214576100fe565b806312889ff814610100578063146e7511146101295780631bad81a2146101525780631f845a8b1461018f576100fe565b366100fe57005b005b34801561010c57600080fd5b5061012760048036038101906101229190612cdd565b610366565b005b34801561013557600080fd5b50610150600480360381019061014b9190612e16565b610751565b005b34801561015e57600080fd5b5061017960048036038101906101749190612ef8565b610bb9565b6040516101869190612f8f565b60405180910390f35b34801561019b57600080fd5b506101b660048036038101906101b19190612faa565b610c67565b005b3480156101c457600080fd5b506101df60048036038101906101da9190612e16565b610d9d565b005b3480156101ed57600080fd5b5061020860048036038101906102039190612fd7565b6111da565b005b6102126114a0565b005b34801561022057600080fd5b5061023b60048036038101906102369190612faa565b6116a0565b005b34801561024957600080fd5b50610264600480360381019061025f91906130a6565b611811565b6040516102719190612f8f565b60405180910390f35b34801561028657600080fd5b5061028f611904565b60405161029c9190613136565b60405180910390f35b6102bf60048036038101906102ba9190613151565b6119dc565b6040516102cc9190613244565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190613266565b611aa3565b005b610306611b54565b005b34801561031457600080fd5b5061032f600480360381019061032a9190613293565b611e88565b005b610339612144565b005b34801561034757600080fd5b5061035061242a565b60405161035d91906133ad565b60405180910390f35b61040960028054610376906133f7565b80601f01602080910402602001604051908101604052809291908181526020018280546103a2906133f7565b80156103ef5780601f106103c4576101008083540402835291602001916103ef565b820191906000526020600020905b8154815290600101906020018083116103d257829003601f168201915b505050505060405180602001604052806000815250612434565b61043f576040517fe840bea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816002908161044e91906135df565b50600073ffffffffffffffffffffffffffffffffffffffff1660008360405161047791906136ed565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104f6576040517fe840bea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008360405161051e91906136ed565b908152602001604051809103902060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461059d576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a00160405280848152602001600081526020016105bf611904565b73ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681525090508060008460405161062391906136ed565b9081526020016040518091039020600082015181600001908161064691906135df565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060018060006101000a81548160ff021916908315150217905550816006819055505050505050565b600060026040516107629190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f8576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080484848484611811565b61083a576040517fe3fb657c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff1660e01b815260040161088a91906133ad565b602060405180830381865afa1580156108a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cb91906137b3565b73ffffffffffffffffffffffffffffffffffffffff161461099c578873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091f9190613136565b602060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906137f5565b6040517f85633a7c00000000000000000000000000000000000000000000000000000000815260040161099391906133ad565b60405180910390fd5b60006109a661242a565b9050808610156109ef5785816040517f543366090000000000000000000000000000000000000000000000000000000081526004016109e6929190613822565b60405180910390fd5b600060405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018842610a24919061387a565b81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815250905080600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f7665a65d987c70e17d9fd5e5483212f37a208012c63f9595f90d17cbb84867918d604051610ba491906133ad565b60405180910390a45050505050505050505050565b600080610bc58561245c565b90506000806002604051610bd99190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610c5c818387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612499565b925050509392505050565b610c6f611904565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd3576040517f0f380e1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d39576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060006002604051610d4b9190613787565b908152602001604051809103902060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006002604051610dae9190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e44576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e5084848484611811565b610e86576040517fe3fb657c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ec09190613136565b602060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0191906137f5565b1015610fbd578873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f409190613136565b602060405180830381865afa158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8191906137f5565b6040517f85633a7c000000000000000000000000000000000000000000000000000000008152600401610fb491906133ad565b60405180910390fd5b6000610fc761242a565b9050808610156110105785816040517f54336609000000000000000000000000000000000000000000000000000000008152600401611007929190613822565b60405180910390fd5b600060405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018842611045919061387a565b81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815250905080600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167faaf407dd1955c59c1aa4889c0b8b365e631c06ee9389b37796e04af64694ed868d6040516111c591906133ad565b60405180910390a45050505050505050505050565b600060026040516111eb9190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611281576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61128d84848484611811565b6112c3576040517fe3fb657c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8747101561130857476040517f6c3c97840000000000000000000000000000000000000000000000000000000081526004016112ff91906133ad565b60405180910390fd5b600061131261242a565b90508086101561135b5785816040517f54336609000000000000000000000000000000000000000000000000000000008152600401611352929190613822565b60405180910390fd5b600060405180606001604052808842611374919061387a565b81526020018b81526020018973ffffffffffffffffffffffffffffffffffffffff16815250905080600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050898873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f378d38c3d14899991f506787b51ef440d2b32ad9c91eae7c97f1c4b1c780dd1b60405160405180910390a450505050505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540361151c576040517f3f5bbb8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090504281600001511115611612576040517f43a34cbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611624816040015182602001516124af565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b600060026040516116b19190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611747576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117ad576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600060026040516117bf9190613787565b908152602001604051809103902060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061186186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061245c565b905060008060026040516118759190613787565b908152602001604051809103902060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506118f8818387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612499565b92505050949350505050565b6000600160009054906101000a900460ff1615611965576000600260405161192c9190613787565b908152602001604051809103902060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506119d9565b6000602067ffffffffffffffff81111561198257611981612b7c565b5b6040519080825280601f01601f1916602001820160405280156119b45781602001600182028036833780820191505090505b5090506020602d60208301303c808060200190518101906119d591906138ec565b9150505b90565b60606119e6611904565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a4a576040517f0f380e1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a998584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050866125a3565b9050949350505050565b60006002604051611ab49190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b4a576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060068190555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403611bd0576040517f3f5bbb8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090504281602001511115611d1c576040517f43a34cbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826060015183604001516040518363ffffffff1660e01b8152600401611d63929190613919565b6020604051808303816000875af1158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da6919061396e565b611de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddc906139f8565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b60006002604051611e999190613787565b908152602001604051809103902060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f2f576040517f7c90ebca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611fc38860028054611f40906133f7565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6c906133f7565b8015611fb95780601f10611f8e57610100808354040283529160200191611fb9565b820191906000526020600020905b815481529060010190602001808311611f9c57829003601f168201915b5050505050612434565b612021576002604051611fd69190613787565b604051809103902088604051611fec91906136ed565b60405180910390207f52411f6568cfae5fce8e0047a965f329ee985a982c44b19791dead75a8a20d3160405160405180910390a35b600061202d89896125d2565b905061203a818888610bb9565b612070576040517f4c36650900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61207c85858585611811565b6120b2576040517fe3fb657c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8760008a6040516120c391906136ed565b9081526020016040518091039020600101819055508960008a6040516120e991906136ed565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036121c0576040517f3f5bbb8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050428160200151111561230c576040517f43a34cbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30836060015184604001516040518463ffffffff1660e01b815260040161235593929190613a18565b600060405180830381600087803b15801561236f57600080fd5b505af1158015612383573d6000803e3d6000fd5b50505050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b6000600654905090565b600081518351148015612454575081805190602001208380519060200120145b905092915050565b6000808260405160200161247091906136ed565b604051602081830303815290604052805190602001209050612491816125fe565b915050919050565b60006124a6848484612634565b90509392505050565b804710156124f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e990613a9b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161251890613aec565b60006040518083038185875af1925050503d8060008114612555576040519150601f19603f3d011682016040523d82523d6000602084013e61255a565b606091505b505090508061259e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259590613b73565b60405180910390fd5b505050565b60606125c9848484604051806060016040528060298152602001613eb0602991396126c3565b90509392505050565b606082826040516020016125e7929190613bb4565b604051602081830303815290604052905092915050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b60008060006126438585612790565b915091506000600481111561265b5761265a613bdc565b5b81600481111561266e5761266d613bdc565b5b1480156126a657508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806126b857506126b78686866127e1565b5b925050509392505050565b606082471015612708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ff90613c7d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127319190613cce565b60006040518083038185875af1925050503d806000811461276e576040519150601f19603f3d011682016040523d82523d6000602084013e612773565b606091505b509150915061278487838387612925565b92505050949350505050565b60008060418351036127d15760008060006020860151925060408601519150606086015160001a90506127c58782858561299a565b945094505050506127da565b60006002915091505b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8686604051602401612818929190613cfe565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516128829190613cce565b600060405180830381855afa9150503d80600081146128bd576040519150601f19603f3d011682016040523d82523d6000602084013e6128c2565b606091505b50915091508180156128d657506020815110155b801561291a5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906129189190613d5a565b145b925050509392505050565b6060831561298757600083510361297f5761293f85612a7c565b61297e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297590613dd3565b60405180910390fd5b5b829050612992565b6129918383612a9f565b5b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156129d5576000600391509150612a73565b6000600187878787604051600081526020016040526040516129fa9493929190613e0f565b6020604051602081039080840390855afa158015612a1c573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a6a57600060019250925050612a73565b80600092509250505b94509492505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612ab25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae69190613e8d565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b2e82612b03565b9050919050565b612b3e81612b23565b8114612b4957600080fd5b50565b600081359050612b5b81612b35565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612bb482612b6b565b810181811067ffffffffffffffff82111715612bd357612bd2612b7c565b5b80604052505050565b6000612be6612aef565b9050612bf28282612bab565b919050565b600067ffffffffffffffff821115612c1257612c11612b7c565b5b612c1b82612b6b565b9050602081019050919050565b82818337600083830152505050565b6000612c4a612c4584612bf7565b612bdc565b905082815260208101848484011115612c6657612c65612b66565b5b612c71848285612c28565b509392505050565b600082601f830112612c8e57612c8d612b61565b5b8135612c9e848260208601612c37565b91505092915050565b6000819050919050565b612cba81612ca7565b8114612cc557600080fd5b50565b600081359050612cd781612cb1565b92915050565b60008060008060808587031215612cf757612cf6612af9565b5b6000612d0587828801612b4c565b9450506020612d1687828801612b4c565b935050604085013567ffffffffffffffff811115612d3757612d36612afe565b5b612d4387828801612c79565b9250506060612d5487828801612cc8565b91505092959194509250565b600080fd5b600080fd5b60008083601f840112612d8057612d7f612b61565b5b8235905067ffffffffffffffff811115612d9d57612d9c612d60565b5b602083019150836001820283011115612db957612db8612d65565b5b9250929050565b60008083601f840112612dd657612dd5612b61565b5b8235905067ffffffffffffffff811115612df357612df2612d60565b5b602083019150836001820283011115612e0f57612e0e612d65565b5b9250929050565b600080600080600080600080600060e08a8c031215612e3857612e37612af9565b5b6000612e468c828d01612b4c565b9950506020612e578c828d01612cc8565b9850506040612e688c828d01612b4c565b9750506060612e798c828d01612b4c565b9650506080612e8a8c828d01612cc8565b95505060a08a013567ffffffffffffffff811115612eab57612eaa612afe565b5b612eb78c828d01612d6a565b945094505060c08a013567ffffffffffffffff811115612eda57612ed9612afe565b5b612ee68c828d01612dc0565b92509250509295985092959850929598565b600080600060408486031215612f1157612f10612af9565b5b600084013567ffffffffffffffff811115612f2f57612f2e612afe565b5b612f3b86828701612c79565b935050602084013567ffffffffffffffff811115612f5c57612f5b612afe565b5b612f6886828701612dc0565b92509250509250925092565b60008115159050919050565b612f8981612f74565b82525050565b6000602082019050612fa46000830184612f80565b92915050565b600060208284031215612fc057612fbf612af9565b5b6000612fce84828501612b4c565b91505092915050565b60008060008060008060008060c0898b031215612ff757612ff6612af9565b5b60006130058b828c01612cc8565b98505060206130168b828c01612b4c565b97505060406130278b828c01612b4c565b96505060606130388b828c01612cc8565b955050608089013567ffffffffffffffff81111561305957613058612afe565b5b6130658b828c01612d6a565b945094505060a089013567ffffffffffffffff81111561308857613087612afe565b5b6130948b828c01612dc0565b92509250509295985092959890939650565b600080600080604085870312156130c0576130bf612af9565b5b600085013567ffffffffffffffff8111156130de576130dd612afe565b5b6130ea87828801612d6a565b9450945050602085013567ffffffffffffffff81111561310d5761310c612afe565b5b61311987828801612dc0565b925092505092959194509250565b61313081612b23565b82525050565b600060208201905061314b6000830184613127565b92915050565b6000806000806060858703121561316b5761316a612af9565b5b600061317987828801612b4c565b945050602061318a87828801612cc8565b935050604085013567ffffffffffffffff8111156131ab576131aa612afe565b5b6131b787828801612dc0565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156131ff5780820151818401526020810190506131e4565b60008484015250505050565b6000613216826131c5565b61322081856131d0565b93506132308185602086016131e1565b61323981612b6b565b840191505092915050565b6000602082019050818103600083015261325e818461320b565b905092915050565b60006020828403121561327c5761327b612af9565b5b600061328a84828501612cc8565b91505092915050565b600080600080600080600080600060c08a8c0312156132b5576132b4612af9565b5b60006132c38c828d01612b4c565b99505060208a013567ffffffffffffffff8111156132e4576132e3612afe565b5b6132f08c828d01612c79565b98505060406133018c828d01612cc8565b97505060608a013567ffffffffffffffff81111561332257613321612afe565b5b61332e8c828d01612dc0565b965096505060808a013567ffffffffffffffff81111561335157613350612afe565b5b61335d8c828d01612d6a565b945094505060a08a013567ffffffffffffffff8111156133805761337f612afe565b5b61338c8c828d01612dc0565b92509250509295985092959850929598565b6133a781612ca7565b82525050565b60006020820190506133c2600083018461339e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061340f57607f821691505b602082108103613422576134216133c8565b5b50919050565b600081519050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613458565b61349f8683613458565b95508019841693508086168417925050509392505050565b6000819050919050565b60006134dc6134d76134d284612ca7565b6134b7565b612ca7565b9050919050565b6000819050919050565b6134f6836134c1565b61350a613502826134e3565b848454613465565b825550505050565b600090565b61351f613512565b61352a8184846134ed565b505050565b5b8181101561354e57613543600082613517565b600181019050613530565b5050565b601f8211156135935761356481613433565b61356d84613448565b8101602085101561357c578190505b61359061358885613448565b83018261352f565b50505b505050565b600082821c905092915050565b60006135b660001984600802613598565b1980831691505092915050565b60006135cf83836135a5565b9150826002028217905092915050565b6135e882613428565b67ffffffffffffffff81111561360157613600612b7c565b5b61360b82546133f7565b613616828285613552565b600060209050601f8311600181146136495760008415613637578287015190505b61364185826135c3565b8655506136a9565b601f19841661365786613433565b60005b8281101561367f5784890151825560018201915060208501945060208101905061365a565b8683101561369c5784890151613698601f8916826135a5565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006136c782613428565b6136d181856136b1565b93506136e18185602086016131e1565b80840191505092915050565b60006136f982846136bc565b915081905092915050565b60008154613711816133f7565b61371b81866136b1565b94506001821660008114613736576001811461374b5761377e565b60ff198316865281151582028601935061377e565b61375485613433565b60005b8381101561377657815481890152600182019150602081019050613757565b838801955050505b50505092915050565b60006137938284613704565b915081905092915050565b6000815190506137ad81612b35565b92915050565b6000602082840312156137c9576137c8612af9565b5b60006137d78482850161379e565b91505092915050565b6000815190506137ef81612cb1565b92915050565b60006020828403121561380b5761380a612af9565b5b6000613819848285016137e0565b91505092915050565b6000604082019050613837600083018561339e565b613844602083018461339e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061388582612ca7565b915061389083612ca7565b92508282019050808211156138a8576138a761384b565b5b92915050565b60006138b982612b03565b9050919050565b6138c9816138ae565b81146138d457600080fd5b50565b6000815190506138e6816138c0565b92915050565b60006020828403121561390257613901612af9565b5b6000613910848285016138d7565b91505092915050565b600060408201905061392e6000830185613127565b61393b602083018461339e565b9392505050565b61394b81612f74565b811461395657600080fd5b50565b60008151905061396881613942565b92915050565b60006020828403121561398457613983612af9565b5b600061399284828501613959565b91505092915050565b600082825260208201905092915050565b7f5472616e736665725f46616c696c656400000000000000000000000000000000600082015250565b60006139e260108361399b565b91506139ed826139ac565b602082019050919050565b60006020820190508181036000830152613a11816139d5565b9050919050565b6000606082019050613a2d6000830186613127565b613a3a6020830185613127565b613a47604083018461339e565b949350505050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000613a85601d8361399b565b9150613a9082613a4f565b602082019050919050565b60006020820190508181036000830152613ab481613a78565b9050919050565b600081905092915050565b50565b6000613ad6600083613abb565b9150613ae182613ac6565b600082019050919050565b6000613af782613ac9565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000613b5d603a8361399b565b9150613b6882613b01565b604082019050919050565b60006020820190508181036000830152613b8c81613b50565b9050919050565b6000819050919050565b613bae613ba982612ca7565b613b93565b82525050565b6000613bc082856136bc565b9150613bcc8284613b9d565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613c6760268361399b565b9150613c7282613c0b565b604082019050919050565b60006020820190508181036000830152613c9681613c5a565b9050919050565b6000613ca8826131c5565b613cb28185613abb565b9350613cc28185602086016131e1565b80840191505092915050565b6000613cda8284613c9d565b915081905092915050565b6000819050919050565b613cf881613ce5565b82525050565b6000604082019050613d136000830185613cef565b8181036020830152613d25818461320b565b90509392505050565b613d3781613ce5565b8114613d4257600080fd5b50565b600081519050613d5481613d2e565b92915050565b600060208284031215613d7057613d6f612af9565b5b6000613d7e84828501613d45565b91505092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613dbd601d8361399b565b9150613dc882613d87565b602082019050919050565b60006020820190508181036000830152613dec81613db0565b9050919050565b600060ff82169050919050565b613e0981613df3565b82525050565b6000608082019050613e246000830187613cef565b613e316020830186613e00565b613e3e6040830185613cef565b613e4b6060830184613cef565b95945050505050565b6000613e5f82613428565b613e69818561399b565b9350613e798185602086016131e1565b613e8281612b6b565b840191505092915050565b60006020820190508181036000830152613ea78184613e54565b90509291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212209791b4d70a3e60a0bee5e4b3954ff23d0dfdd8b3a440092e20b990d64d73ceb664736f6c63430008120033",
}

// WalletABI is the input ABI used to generate the binding from.
// Deprecated: Use WalletMetaData.ABI instead.
var WalletABI = WalletMetaData.ABI

// WalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WalletMetaData.Bin instead.
var WalletBin = WalletMetaData.Bin

// DeployWallet deploys a new Ethereum contract, binding an instance of Wallet to it.
func DeployWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Wallet, error) {
	parsed, err := WalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wallet{WalletCaller: WalletCaller{contract: contract}, WalletTransactor: WalletTransactor{contract: contract}, WalletFilterer: WalletFilterer{contract: contract}}, nil
}

// Wallet is an auto generated Go binding around an Ethereum contract.
type Wallet struct {
	WalletCaller     // Read-only binding to the contract
	WalletTransactor // Write-only binding to the contract
	WalletFilterer   // Log filterer for contract events
}

// WalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletSession struct {
	Contract     *Wallet           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCallerSession struct {
	Contract *WalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// WalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletTransactorSession struct {
	Contract     *WalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletRaw struct {
	Contract *Wallet // Generic contract binding to access the raw methods on
}

// WalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCallerRaw struct {
	Contract *WalletCaller // Generic read-only contract binding to access the raw methods on
}

// WalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletTransactorRaw struct {
	Contract *WalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWallet creates a new instance of Wallet, bound to a specific deployed contract.
func NewWallet(address common.Address, backend bind.ContractBackend) (*Wallet, error) {
	contract, err := bindWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wallet{WalletCaller: WalletCaller{contract: contract}, WalletTransactor: WalletTransactor{contract: contract}, WalletFilterer: WalletFilterer{contract: contract}}, nil
}

// NewWalletCaller creates a new read-only instance of Wallet, bound to a specific deployed contract.
func NewWalletCaller(address common.Address, caller bind.ContractCaller) (*WalletCaller, error) {
	contract, err := bindWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCaller{contract: contract}, nil
}

// NewWalletTransactor creates a new write-only instance of Wallet, bound to a specific deployed contract.
func NewWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletTransactor, error) {
	contract, err := bindWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletTransactor{contract: contract}, nil
}

// NewWalletFilterer creates a new log filterer instance of Wallet, bound to a specific deployed contract.
func NewWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletFilterer, error) {
	contract, err := bindWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletFilterer{contract: contract}, nil
}

// bindWallet binds a generic wrapper to an already deployed contract.
func bindWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wallet *WalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wallet.Contract.WalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wallet *WalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.Contract.WalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wallet *WalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wallet.Contract.WalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wallet *WalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wallet *WalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wallet *WalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wallet.Contract.contract.Transact(opts, method, params...)
}

// GetMinDelay is a free data retrieval call binding the contract method 0xf27a0c92.
//
// Solidity: function getMinDelay() view returns(uint256)
func (_Wallet *WalletCaller) GetMinDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wallet.contract.Call(opts, &out, "getMinDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinDelay is a free data retrieval call binding the contract method 0xf27a0c92.
//
// Solidity: function getMinDelay() view returns(uint256)
func (_Wallet *WalletSession) GetMinDelay() (*big.Int, error) {
	return _Wallet.Contract.GetMinDelay(&_Wallet.CallOpts)
}

// GetMinDelay is a free data retrieval call binding the contract method 0xf27a0c92.
//
// Solidity: function getMinDelay() view returns(uint256)
func (_Wallet *WalletCallerSession) GetMinDelay() (*big.Int, error) {
	return _Wallet.Contract.GetMinDelay(&_Wallet.CallOpts)
}

// IsValidManagerSignature is a free data retrieval call binding the contract method 0x1bad81a2.
//
// Solidity: function isValidManagerSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletCaller) IsValidManagerSignature(opts *bind.CallOpts, _veridata string, signature []byte) (bool, error) {
	var out []interface{}
	err := _Wallet.contract.Call(opts, &out, "isValidManagerSignature", _veridata, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidManagerSignature is a free data retrieval call binding the contract method 0x1bad81a2.
//
// Solidity: function isValidManagerSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletSession) IsValidManagerSignature(_veridata string, signature []byte) (bool, error) {
	return _Wallet.Contract.IsValidManagerSignature(&_Wallet.CallOpts, _veridata, signature)
}

// IsValidManagerSignature is a free data retrieval call binding the contract method 0x1bad81a2.
//
// Solidity: function isValidManagerSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletCallerSession) IsValidManagerSignature(_veridata string, signature []byte) (bool, error) {
	return _Wallet.Contract.IsValidManagerSignature(&_Wallet.CallOpts, _veridata, signature)
}

// IsValidUserSignature is a free data retrieval call binding the contract method 0x4853d1b4.
//
// Solidity: function isValidUserSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletCaller) IsValidUserSignature(opts *bind.CallOpts, _veridata string, signature []byte) (bool, error) {
	var out []interface{}
	err := _Wallet.contract.Call(opts, &out, "isValidUserSignature", _veridata, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidUserSignature is a free data retrieval call binding the contract method 0x4853d1b4.
//
// Solidity: function isValidUserSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletSession) IsValidUserSignature(_veridata string, signature []byte) (bool, error) {
	return _Wallet.Contract.IsValidUserSignature(&_Wallet.CallOpts, _veridata, signature)
}

// IsValidUserSignature is a free data retrieval call binding the contract method 0x4853d1b4.
//
// Solidity: function isValidUserSignature(string _veridata, bytes signature) view returns(bool)
func (_Wallet *WalletCallerSession) IsValidUserSignature(_veridata string, signature []byte) (bool, error) {
	return _Wallet.Contract.IsValidUserSignature(&_Wallet.CallOpts, _veridata, signature)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wallet *WalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wallet *WalletSession) Owner() (common.Address, error) {
	return _Wallet.Contract.Owner(&_Wallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wallet *WalletCallerSession) Owner() (common.Address, error) {
	return _Wallet.Contract.Owner(&_Wallet.CallOpts)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes _calldata) payable returns(bytes)
func (_Wallet *WalletTransactor) ExecuteCall(opts *bind.TransactOpts, to common.Address, value *big.Int, _calldata []byte) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "executeCall", to, value, _calldata)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes _calldata) payable returns(bytes)
func (_Wallet *WalletSession) ExecuteCall(to common.Address, value *big.Int, _calldata []byte) (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteCall(&_Wallet.TransactOpts, to, value, _calldata)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes _calldata) payable returns(bytes)
func (_Wallet *WalletTransactorSession) ExecuteCall(to common.Address, value *big.Int, _calldata []byte) (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteCall(&_Wallet.TransactOpts, to, value, _calldata)
}

// ExecuteEthTrans is a paid mutator transaction binding the contract method 0x30f3c394.
//
// Solidity: function executeEthTrans() payable returns()
func (_Wallet *WalletTransactor) ExecuteEthTrans(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "executeEthTrans")
}

// ExecuteEthTrans is a paid mutator transaction binding the contract method 0x30f3c394.
//
// Solidity: function executeEthTrans() payable returns()
func (_Wallet *WalletSession) ExecuteEthTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteEthTrans(&_Wallet.TransactOpts)
}

// ExecuteEthTrans is a paid mutator transaction binding the contract method 0x30f3c394.
//
// Solidity: function executeEthTrans() payable returns()
func (_Wallet *WalletTransactorSession) ExecuteEthTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteEthTrans(&_Wallet.TransactOpts)
}

// ExecuteNFTTrans is a paid mutator transaction binding the contract method 0xeb5d25d6.
//
// Solidity: function executeNFTTrans() payable returns()
func (_Wallet *WalletTransactor) ExecuteNFTTrans(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "executeNFTTrans")
}

// ExecuteNFTTrans is a paid mutator transaction binding the contract method 0xeb5d25d6.
//
// Solidity: function executeNFTTrans() payable returns()
func (_Wallet *WalletSession) ExecuteNFTTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteNFTTrans(&_Wallet.TransactOpts)
}

// ExecuteNFTTrans is a paid mutator transaction binding the contract method 0xeb5d25d6.
//
// Solidity: function executeNFTTrans() payable returns()
func (_Wallet *WalletTransactorSession) ExecuteNFTTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteNFTTrans(&_Wallet.TransactOpts)
}

// ExecuteTokenTrans is a paid mutator transaction binding the contract method 0xc2af616f.
//
// Solidity: function executeTokenTrans() payable returns()
func (_Wallet *WalletTransactor) ExecuteTokenTrans(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "executeTokenTrans")
}

// ExecuteTokenTrans is a paid mutator transaction binding the contract method 0xc2af616f.
//
// Solidity: function executeTokenTrans() payable returns()
func (_Wallet *WalletSession) ExecuteTokenTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteTokenTrans(&_Wallet.TransactOpts)
}

// ExecuteTokenTrans is a paid mutator transaction binding the contract method 0xc2af616f.
//
// Solidity: function executeTokenTrans() payable returns()
func (_Wallet *WalletTransactorSession) ExecuteTokenTrans() (*types.Transaction, error) {
	return _Wallet.Contract.ExecuteTokenTrans(&_Wallet.TransactOpts)
}

// InitData is a paid mutator transaction binding the contract method 0x12889ff8.
//
// Solidity: function initData(address _manager, address _signaddress, string _email, uint256 delay) returns()
func (_Wallet *WalletTransactor) InitData(opts *bind.TransactOpts, _manager common.Address, _signaddress common.Address, _email string, delay *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "initData", _manager, _signaddress, _email, delay)
}

// InitData is a paid mutator transaction binding the contract method 0x12889ff8.
//
// Solidity: function initData(address _manager, address _signaddress, string _email, uint256 delay) returns()
func (_Wallet *WalletSession) InitData(_manager common.Address, _signaddress common.Address, _email string, delay *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitData(&_Wallet.TransactOpts, _manager, _signaddress, _email, delay)
}

// InitData is a paid mutator transaction binding the contract method 0x12889ff8.
//
// Solidity: function initData(address _manager, address _signaddress, string _email, uint256 delay) returns()
func (_Wallet *WalletTransactorSession) InitData(_manager common.Address, _signaddress common.Address, _email string, delay *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitData(&_Wallet.TransactOpts, _manager, _signaddress, _email, delay)
}

// ResetManaget is a paid mutator transaction binding the contract method 0x43f93c5a.
//
// Solidity: function resetManaget(address _manager) returns()
func (_Wallet *WalletTransactor) ResetManaget(opts *bind.TransactOpts, _manager common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "resetManaget", _manager)
}

// ResetManaget is a paid mutator transaction binding the contract method 0x43f93c5a.
//
// Solidity: function resetManaget(address _manager) returns()
func (_Wallet *WalletSession) ResetManaget(_manager common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.ResetManaget(&_Wallet.TransactOpts, _manager)
}

// ResetManaget is a paid mutator transaction binding the contract method 0x43f93c5a.
//
// Solidity: function resetManaget(address _manager) returns()
func (_Wallet *WalletTransactorSession) ResetManaget(_manager common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.ResetManaget(&_Wallet.TransactOpts, _manager)
}

// ResetOrforgetPassword is a paid mutator transaction binding the contract method 0xd0c6bd5a.
//
// Solidity: function resetOrforgetPassword(address _newaddress, string _email, uint256 _code, bytes emailsignature, string hash, bytes signature) returns()
func (_Wallet *WalletTransactor) ResetOrforgetPassword(opts *bind.TransactOpts, _newaddress common.Address, _email string, _code *big.Int, emailsignature []byte, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "resetOrforgetPassword", _newaddress, _email, _code, emailsignature, hash, signature)
}

// ResetOrforgetPassword is a paid mutator transaction binding the contract method 0xd0c6bd5a.
//
// Solidity: function resetOrforgetPassword(address _newaddress, string _email, uint256 _code, bytes emailsignature, string hash, bytes signature) returns()
func (_Wallet *WalletSession) ResetOrforgetPassword(_newaddress common.Address, _email string, _code *big.Int, emailsignature []byte, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.ResetOrforgetPassword(&_Wallet.TransactOpts, _newaddress, _email, _code, emailsignature, hash, signature)
}

// ResetOrforgetPassword is a paid mutator transaction binding the contract method 0xd0c6bd5a.
//
// Solidity: function resetOrforgetPassword(address _newaddress, string _email, uint256 _code, bytes emailsignature, string hash, bytes signature) returns()
func (_Wallet *WalletTransactorSession) ResetOrforgetPassword(_newaddress common.Address, _email string, _code *big.Int, emailsignature []byte, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.ResetOrforgetPassword(&_Wallet.TransactOpts, _newaddress, _email, _code, emailsignature, hash, signature)
}

// ResetSignAddress is a paid mutator transaction binding the contract method 0x1f845a8b.
//
// Solidity: function resetSignAddress(address _signaddress) returns()
func (_Wallet *WalletTransactor) ResetSignAddress(opts *bind.TransactOpts, _signaddress common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "resetSignAddress", _signaddress)
}

// ResetSignAddress is a paid mutator transaction binding the contract method 0x1f845a8b.
//
// Solidity: function resetSignAddress(address _signaddress) returns()
func (_Wallet *WalletSession) ResetSignAddress(_signaddress common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.ResetSignAddress(&_Wallet.TransactOpts, _signaddress)
}

// ResetSignAddress is a paid mutator transaction binding the contract method 0x1f845a8b.
//
// Solidity: function resetSignAddress(address _signaddress) returns()
func (_Wallet *WalletTransactorSession) ResetSignAddress(_signaddress common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.ResetSignAddress(&_Wallet.TransactOpts, _signaddress)
}

// SetEthTransPayee is a paid mutator transaction binding the contract method 0x2b28be76.
//
// Solidity: function setEthTransPayee(uint256 amount, address payee, address to, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactor) SetEthTransPayee(opts *bind.TransactOpts, amount *big.Int, payee common.Address, to common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "setEthTransPayee", amount, payee, to, _delay, hash, signature)
}

// SetEthTransPayee is a paid mutator transaction binding the contract method 0x2b28be76.
//
// Solidity: function setEthTransPayee(uint256 amount, address payee, address to, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletSession) SetEthTransPayee(amount *big.Int, payee common.Address, to common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetEthTransPayee(&_Wallet.TransactOpts, amount, payee, to, _delay, hash, signature)
}

// SetEthTransPayee is a paid mutator transaction binding the contract method 0x2b28be76.
//
// Solidity: function setEthTransPayee(uint256 amount, address payee, address to, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactorSession) SetEthTransPayee(amount *big.Int, payee common.Address, to common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetEthTransPayee(&_Wallet.TransactOpts, amount, payee, to, _delay, hash, signature)
}

// SetMinDelay is a paid mutator transaction binding the contract method 0xba29482f.
//
// Solidity: function setMinDelay(uint256 newdelay) returns()
func (_Wallet *WalletTransactor) SetMinDelay(opts *bind.TransactOpts, newdelay *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "setMinDelay", newdelay)
}

// SetMinDelay is a paid mutator transaction binding the contract method 0xba29482f.
//
// Solidity: function setMinDelay(uint256 newdelay) returns()
func (_Wallet *WalletSession) SetMinDelay(newdelay *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SetMinDelay(&_Wallet.TransactOpts, newdelay)
}

// SetMinDelay is a paid mutator transaction binding the contract method 0xba29482f.
//
// Solidity: function setMinDelay(uint256 newdelay) returns()
func (_Wallet *WalletTransactorSession) SetMinDelay(newdelay *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SetMinDelay(&_Wallet.TransactOpts, newdelay)
}

// SetNFTTransPayee is a paid mutator transaction binding the contract method 0x146e7511.
//
// Solidity: function setNFTTransPayee(address tokencontract, uint256 tokenID, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactor) SetNFTTransPayee(opts *bind.TransactOpts, tokencontract common.Address, tokenID *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "setNFTTransPayee", tokencontract, tokenID, to, payee, _delay, hash, signature)
}

// SetNFTTransPayee is a paid mutator transaction binding the contract method 0x146e7511.
//
// Solidity: function setNFTTransPayee(address tokencontract, uint256 tokenID, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletSession) SetNFTTransPayee(tokencontract common.Address, tokenID *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetNFTTransPayee(&_Wallet.TransactOpts, tokencontract, tokenID, to, payee, _delay, hash, signature)
}

// SetNFTTransPayee is a paid mutator transaction binding the contract method 0x146e7511.
//
// Solidity: function setNFTTransPayee(address tokencontract, uint256 tokenID, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactorSession) SetNFTTransPayee(tokencontract common.Address, tokenID *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetNFTTransPayee(&_Wallet.TransactOpts, tokencontract, tokenID, to, payee, _delay, hash, signature)
}

// SetTokenTransPayee is a paid mutator transaction binding the contract method 0x21c74acf.
//
// Solidity: function setTokenTransPayee(address tokencontract, uint256 amount, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactor) SetTokenTransPayee(opts *bind.TransactOpts, tokencontract common.Address, amount *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "setTokenTransPayee", tokencontract, amount, to, payee, _delay, hash, signature)
}

// SetTokenTransPayee is a paid mutator transaction binding the contract method 0x21c74acf.
//
// Solidity: function setTokenTransPayee(address tokencontract, uint256 amount, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletSession) SetTokenTransPayee(tokencontract common.Address, amount *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetTokenTransPayee(&_Wallet.TransactOpts, tokencontract, amount, to, payee, _delay, hash, signature)
}

// SetTokenTransPayee is a paid mutator transaction binding the contract method 0x21c74acf.
//
// Solidity: function setTokenTransPayee(address tokencontract, uint256 amount, address to, address payee, uint256 _delay, string hash, bytes signature) returns()
func (_Wallet *WalletTransactorSession) SetTokenTransPayee(tokencontract common.Address, amount *big.Int, to common.Address, payee common.Address, _delay *big.Int, hash string, signature []byte) (*types.Transaction, error) {
	return _Wallet.Contract.SetTokenTransPayee(&_Wallet.TransactOpts, tokencontract, amount, to, payee, _delay, hash, signature)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Wallet *WalletTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Wallet.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Wallet *WalletSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Wallet.Contract.Fallback(&_Wallet.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Wallet *WalletTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Wallet.Contract.Fallback(&_Wallet.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Wallet *WalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Wallet *WalletSession) Receive() (*types.Transaction, error) {
	return _Wallet.Contract.Receive(&_Wallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Wallet *WalletTransactorSession) Receive() (*types.Transaction, error) {
	return _Wallet.Contract.Receive(&_Wallet.TransactOpts)
}

// WalletEthTransPayeeIterator is returned from FilterEthTransPayee and is used to iterate over the raw logs and unpacked data for EthTransPayee events raised by the Wallet contract.
type WalletEthTransPayeeIterator struct {
	Event *WalletEthTransPayee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletEthTransPayeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletEthTransPayee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletEthTransPayee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletEthTransPayeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletEthTransPayeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletEthTransPayee represents a EthTransPayee event raised by the Wallet contract.
type WalletEthTransPayee struct {
	Payee  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEthTransPayee is a free log retrieval operation binding the contract event 0x378d38c3d14899991f506787b51ef440d2b32ad9c91eae7c97f1c4b1c780dd1b.
//
// Solidity: event EthTransPayee(address indexed payee, address indexed to, uint256 indexed amount)
func (_Wallet *WalletFilterer) FilterEthTransPayee(opts *bind.FilterOpts, payee []common.Address, to []common.Address, amount []*big.Int) (*WalletEthTransPayeeIterator, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "EthTransPayee", payeeRule, toRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &WalletEthTransPayeeIterator{contract: _Wallet.contract, event: "EthTransPayee", logs: logs, sub: sub}, nil
}

// WatchEthTransPayee is a free log subscription operation binding the contract event 0x378d38c3d14899991f506787b51ef440d2b32ad9c91eae7c97f1c4b1c780dd1b.
//
// Solidity: event EthTransPayee(address indexed payee, address indexed to, uint256 indexed amount)
func (_Wallet *WalletFilterer) WatchEthTransPayee(opts *bind.WatchOpts, sink chan<- *WalletEthTransPayee, payee []common.Address, to []common.Address, amount []*big.Int) (event.Subscription, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "EthTransPayee", payeeRule, toRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletEthTransPayee)
				if err := _Wallet.contract.UnpackLog(event, "EthTransPayee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthTransPayee is a log parse operation binding the contract event 0x378d38c3d14899991f506787b51ef440d2b32ad9c91eae7c97f1c4b1c780dd1b.
//
// Solidity: event EthTransPayee(address indexed payee, address indexed to, uint256 indexed amount)
func (_Wallet *WalletFilterer) ParseEthTransPayee(log types.Log) (*WalletEthTransPayee, error) {
	event := new(WalletEthTransPayee)
	if err := _Wallet.contract.UnpackLog(event, "EthTransPayee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WalletNFTTransPayeeIterator is returned from FilterNFTTransPayee and is used to iterate over the raw logs and unpacked data for NFTTransPayee events raised by the Wallet contract.
type WalletNFTTransPayeeIterator struct {
	Event *WalletNFTTransPayee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletNFTTransPayeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletNFTTransPayee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletNFTTransPayee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletNFTTransPayeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletNFTTransPayeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletNFTTransPayee represents a NFTTransPayee event raised by the Wallet contract.
type WalletNFTTransPayee struct {
	Payee         common.Address
	Tokencontract common.Address
	To            common.Address
	TokenID       *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNFTTransPayee is a free log retrieval operation binding the contract event 0x7665a65d987c70e17d9fd5e5483212f37a208012c63f9595f90d17cbb8486791.
//
// Solidity: event NFTTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 tokenID)
func (_Wallet *WalletFilterer) FilterNFTTransPayee(opts *bind.FilterOpts, payee []common.Address, tokencontract []common.Address, to []common.Address) (*WalletNFTTransPayeeIterator, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var tokencontractRule []interface{}
	for _, tokencontractItem := range tokencontract {
		tokencontractRule = append(tokencontractRule, tokencontractItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "NFTTransPayee", payeeRule, tokencontractRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WalletNFTTransPayeeIterator{contract: _Wallet.contract, event: "NFTTransPayee", logs: logs, sub: sub}, nil
}

// WatchNFTTransPayee is a free log subscription operation binding the contract event 0x7665a65d987c70e17d9fd5e5483212f37a208012c63f9595f90d17cbb8486791.
//
// Solidity: event NFTTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 tokenID)
func (_Wallet *WalletFilterer) WatchNFTTransPayee(opts *bind.WatchOpts, sink chan<- *WalletNFTTransPayee, payee []common.Address, tokencontract []common.Address, to []common.Address) (event.Subscription, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var tokencontractRule []interface{}
	for _, tokencontractItem := range tokencontract {
		tokencontractRule = append(tokencontractRule, tokencontractItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "NFTTransPayee", payeeRule, tokencontractRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletNFTTransPayee)
				if err := _Wallet.contract.UnpackLog(event, "NFTTransPayee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTTransPayee is a log parse operation binding the contract event 0x7665a65d987c70e17d9fd5e5483212f37a208012c63f9595f90d17cbb8486791.
//
// Solidity: event NFTTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 tokenID)
func (_Wallet *WalletFilterer) ParseNFTTransPayee(log types.Log) (*WalletNFTTransPayee, error) {
	event := new(WalletNFTTransPayee)
	if err := _Wallet.contract.UnpackLog(event, "NFTTransPayee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WalletTokenTransPayeeIterator is returned from FilterTokenTransPayee and is used to iterate over the raw logs and unpacked data for TokenTransPayee events raised by the Wallet contract.
type WalletTokenTransPayeeIterator struct {
	Event *WalletTokenTransPayee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTokenTransPayeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTokenTransPayee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTokenTransPayee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTokenTransPayeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTokenTransPayeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTokenTransPayee represents a TokenTransPayee event raised by the Wallet contract.
type WalletTokenTransPayee struct {
	Payee         common.Address
	Tokencontract common.Address
	To            common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTokenTransPayee is a free log retrieval operation binding the contract event 0xaaf407dd1955c59c1aa4889c0b8b365e631c06ee9389b37796e04af64694ed86.
//
// Solidity: event TokenTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 amount)
func (_Wallet *WalletFilterer) FilterTokenTransPayee(opts *bind.FilterOpts, payee []common.Address, tokencontract []common.Address, to []common.Address) (*WalletTokenTransPayeeIterator, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var tokencontractRule []interface{}
	for _, tokencontractItem := range tokencontract {
		tokencontractRule = append(tokencontractRule, tokencontractItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "TokenTransPayee", payeeRule, tokencontractRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WalletTokenTransPayeeIterator{contract: _Wallet.contract, event: "TokenTransPayee", logs: logs, sub: sub}, nil
}

// WatchTokenTransPayee is a free log subscription operation binding the contract event 0xaaf407dd1955c59c1aa4889c0b8b365e631c06ee9389b37796e04af64694ed86.
//
// Solidity: event TokenTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 amount)
func (_Wallet *WalletFilterer) WatchTokenTransPayee(opts *bind.WatchOpts, sink chan<- *WalletTokenTransPayee, payee []common.Address, tokencontract []common.Address, to []common.Address) (event.Subscription, error) {

	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}
	var tokencontractRule []interface{}
	for _, tokencontractItem := range tokencontract {
		tokencontractRule = append(tokencontractRule, tokencontractItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "TokenTransPayee", payeeRule, tokencontractRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTokenTransPayee)
				if err := _Wallet.contract.UnpackLog(event, "TokenTransPayee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenTransPayee is a log parse operation binding the contract event 0xaaf407dd1955c59c1aa4889c0b8b365e631c06ee9389b37796e04af64694ed86.
//
// Solidity: event TokenTransPayee(address indexed payee, address indexed tokencontract, address indexed to, uint256 amount)
func (_Wallet *WalletFilterer) ParseTokenTransPayee(log types.Log) (*WalletTokenTransPayee, error) {
	event := new(WalletTokenTransPayee)
	if err := _Wallet.contract.UnpackLog(event, "TokenTransPayee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WalletEmailerrorIterator is returned from FilterEmailerror and is used to iterate over the raw logs and unpacked data for Emailerror events raised by the Wallet contract.
type WalletEmailerrorIterator struct {
	Event *WalletEmailerror // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletEmailerrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletEmailerror)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletEmailerror)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletEmailerrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletEmailerrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletEmailerror represents a Emailerror event raised by the Wallet contract.
type WalletEmailerror struct {
	Inputemail  common.Hash
	Storedemail common.Hash
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEmailerror is a free log retrieval operation binding the contract event 0x52411f6568cfae5fce8e0047a965f329ee985a982c44b19791dead75a8a20d31.
//
// Solidity: event emailerror(string indexed inputemail, string indexed storedemail)
func (_Wallet *WalletFilterer) FilterEmailerror(opts *bind.FilterOpts, inputemail []string, storedemail []string) (*WalletEmailerrorIterator, error) {

	var inputemailRule []interface{}
	for _, inputemailItem := range inputemail {
		inputemailRule = append(inputemailRule, inputemailItem)
	}
	var storedemailRule []interface{}
	for _, storedemailItem := range storedemail {
		storedemailRule = append(storedemailRule, storedemailItem)
	}

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "emailerror", inputemailRule, storedemailRule)
	if err != nil {
		return nil, err
	}
	return &WalletEmailerrorIterator{contract: _Wallet.contract, event: "emailerror", logs: logs, sub: sub}, nil
}

// WatchEmailerror is a free log subscription operation binding the contract event 0x52411f6568cfae5fce8e0047a965f329ee985a982c44b19791dead75a8a20d31.
//
// Solidity: event emailerror(string indexed inputemail, string indexed storedemail)
func (_Wallet *WalletFilterer) WatchEmailerror(opts *bind.WatchOpts, sink chan<- *WalletEmailerror, inputemail []string, storedemail []string) (event.Subscription, error) {

	var inputemailRule []interface{}
	for _, inputemailItem := range inputemail {
		inputemailRule = append(inputemailRule, inputemailItem)
	}
	var storedemailRule []interface{}
	for _, storedemailItem := range storedemail {
		storedemailRule = append(storedemailRule, storedemailItem)
	}

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "emailerror", inputemailRule, storedemailRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletEmailerror)
				if err := _Wallet.contract.UnpackLog(event, "emailerror", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmailerror is a log parse operation binding the contract event 0x52411f6568cfae5fce8e0047a965f329ee985a982c44b19791dead75a8a20d31.
//
// Solidity: event emailerror(string indexed inputemail, string indexed storedemail)
func (_Wallet *WalletFilterer) ParseEmailerror(log types.Log) (*WalletEmailerror, error) {
	event := new(WalletEmailerror)
	if err := _Wallet.contract.UnpackLog(event, "emailerror", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
